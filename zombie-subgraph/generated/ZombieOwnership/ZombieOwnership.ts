// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class NewZombie extends ethereum.Event {
  get params(): NewZombie__Params {
    return new NewZombie__Params(this);
  }
}

export class NewZombie__Params {
  _event: NewZombie;

  constructor(event: NewZombie) {
    this._event = event;
  }

  get zombieId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get dna(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ZombieOwnership__zombiesResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: string,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class ZombieOwnership extends ethereum.SmartContract {
  static bind(address: Address): ZombieOwnership {
    return new ZombieOwnership("ZombieOwnership", address);
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  countZombie(): BigInt {
    let result = super.call("countZombie", "countZombie():(uint256)", []);

    return result[0].toBigInt();
  }

  try_countZombie(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("countZombie", "countZombie():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createRandomZombie(_name: string): BigInt {
    let result = super.call(
      "createRandomZombie",
      "createRandomZombie(string):(uint256)",
      [ethereum.Value.fromString(_name)]
    );

    return result[0].toBigInt();
  }

  try_createRandomZombie(_name: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createRandomZombie",
      "createRandomZombie(string):(uint256)",
      [ethereum.Value.fromString(_name)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCoolDownTime(): BigInt {
    let result = super.call(
      "getCoolDownTime",
      "getCoolDownTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCoolDownTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCoolDownTime",
      "getCoolDownTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getZombiesByOwner(_owner: Address): Array<BigInt> {
    let result = super.call(
      "getZombiesByOwner",
      "getZombiesByOwner(address):(uint256[])",
      [ethereum.Value.fromAddress(_owner)]
    );

    return result[0].toBigIntArray();
  }

  try_getZombiesByOwner(_owner: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getZombiesByOwner",
      "getZombiesByOwner(address):(uint256[])",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintZombieToPlayer(playerAddress: Address, name: string): BigInt {
    let result = super.call(
      "mintZombieToPlayer",
      "mintZombieToPlayer(address,string):(uint256)",
      [
        ethereum.Value.fromAddress(playerAddress),
        ethereum.Value.fromString(name)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintZombieToPlayer(
    playerAddress: Address,
    name: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintZombieToPlayer",
      "mintZombieToPlayer(address,string):(uint256)",
      [
        ethereum.Value.fromAddress(playerAddress),
        ethereum.Value.fromString(name)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(_tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  updateCoolDownTime(_updateCooldownTime: BigInt): BigInt {
    let result = super.call(
      "updateCoolDownTime",
      "updateCoolDownTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_updateCooldownTime)]
    );

    return result[0].toBigInt();
  }

  try_updateCoolDownTime(
    _updateCooldownTime: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateCoolDownTime",
      "updateCoolDownTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_updateCooldownTime)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  zombieToOwner(param0: BigInt): Address {
    let result = super.call(
      "zombieToOwner",
      "zombieToOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_zombieToOwner(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "zombieToOwner",
      "zombieToOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  zombies(param0: BigInt): ZombieOwnership__zombiesResult {
    let result = super.call(
      "zombies",
      "zombies(uint256):(string,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ZombieOwnership__zombiesResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_zombies(
    param0: BigInt
  ): ethereum.CallResult<ZombieOwnership__zombiesResult> {
    let result = super.tryCall(
      "zombies",
      "zombies(uint256):(string,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ZombieOwnership__zombiesResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _approved(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class AttackCall extends ethereum.Call {
  get inputs(): AttackCall__Inputs {
    return new AttackCall__Inputs(this);
  }

  get outputs(): AttackCall__Outputs {
    return new AttackCall__Outputs(this);
  }
}

export class AttackCall__Inputs {
  _call: AttackCall;

  constructor(call: AttackCall) {
    this._call = call;
  }

  get _zombieId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _targetId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AttackCall__Outputs {
  _call: AttackCall;

  constructor(call: AttackCall) {
    this._call = call;
  }
}

export class ChangeDnaCall extends ethereum.Call {
  get inputs(): ChangeDnaCall__Inputs {
    return new ChangeDnaCall__Inputs(this);
  }

  get outputs(): ChangeDnaCall__Outputs {
    return new ChangeDnaCall__Outputs(this);
  }
}

export class ChangeDnaCall__Inputs {
  _call: ChangeDnaCall;

  constructor(call: ChangeDnaCall) {
    this._call = call;
  }

  get _zombieId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newDna(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeDnaCall__Outputs {
  _call: ChangeDnaCall;

  constructor(call: ChangeDnaCall) {
    this._call = call;
  }
}

export class ChangeNameCall extends ethereum.Call {
  get inputs(): ChangeNameCall__Inputs {
    return new ChangeNameCall__Inputs(this);
  }

  get outputs(): ChangeNameCall__Outputs {
    return new ChangeNameCall__Outputs(this);
  }
}

export class ChangeNameCall__Inputs {
  _call: ChangeNameCall;

  constructor(call: ChangeNameCall) {
    this._call = call;
  }

  get _zombieId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ChangeNameCall__Outputs {
  _call: ChangeNameCall;

  constructor(call: ChangeNameCall) {
    this._call = call;
  }
}

export class CreateRandomZombieCall extends ethereum.Call {
  get inputs(): CreateRandomZombieCall__Inputs {
    return new CreateRandomZombieCall__Inputs(this);
  }

  get outputs(): CreateRandomZombieCall__Outputs {
    return new CreateRandomZombieCall__Outputs(this);
  }
}

export class CreateRandomZombieCall__Inputs {
  _call: CreateRandomZombieCall;

  constructor(call: CreateRandomZombieCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class CreateRandomZombieCall__Outputs {
  _call: CreateRandomZombieCall;

  constructor(call: CreateRandomZombieCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class FeedOnKittyCall extends ethereum.Call {
  get inputs(): FeedOnKittyCall__Inputs {
    return new FeedOnKittyCall__Inputs(this);
  }

  get outputs(): FeedOnKittyCall__Outputs {
    return new FeedOnKittyCall__Outputs(this);
  }
}

export class FeedOnKittyCall__Inputs {
  _call: FeedOnKittyCall;

  constructor(call: FeedOnKittyCall) {
    this._call = call;
  }

  get _zombieId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _kittyId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FeedOnKittyCall__Outputs {
  _call: FeedOnKittyCall;

  constructor(call: FeedOnKittyCall) {
    this._call = call;
  }
}

export class LevelUpCall extends ethereum.Call {
  get inputs(): LevelUpCall__Inputs {
    return new LevelUpCall__Inputs(this);
  }

  get outputs(): LevelUpCall__Outputs {
    return new LevelUpCall__Outputs(this);
  }
}

export class LevelUpCall__Inputs {
  _call: LevelUpCall;

  constructor(call: LevelUpCall) {
    this._call = call;
  }

  get _zombieId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LevelUpCall__Outputs {
  _call: LevelUpCall;

  constructor(call: LevelUpCall) {
    this._call = call;
  }
}

export class MintZombieToPlayerCall extends ethereum.Call {
  get inputs(): MintZombieToPlayerCall__Inputs {
    return new MintZombieToPlayerCall__Inputs(this);
  }

  get outputs(): MintZombieToPlayerCall__Outputs {
    return new MintZombieToPlayerCall__Outputs(this);
  }
}

export class MintZombieToPlayerCall__Inputs {
  _call: MintZombieToPlayerCall;

  constructor(call: MintZombieToPlayerCall) {
    this._call = call;
  }

  get playerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class MintZombieToPlayerCall__Outputs {
  _call: MintZombieToPlayerCall;

  constructor(call: MintZombieToPlayerCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetKittyContractAddressCall extends ethereum.Call {
  get inputs(): SetKittyContractAddressCall__Inputs {
    return new SetKittyContractAddressCall__Inputs(this);
  }

  get outputs(): SetKittyContractAddressCall__Outputs {
    return new SetKittyContractAddressCall__Outputs(this);
  }
}

export class SetKittyContractAddressCall__Inputs {
  _call: SetKittyContractAddressCall;

  constructor(call: SetKittyContractAddressCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetKittyContractAddressCall__Outputs {
  _call: SetKittyContractAddressCall;

  constructor(call: SetKittyContractAddressCall) {
    this._call = call;
  }
}

export class SetLevelUpFeeCall extends ethereum.Call {
  get inputs(): SetLevelUpFeeCall__Inputs {
    return new SetLevelUpFeeCall__Inputs(this);
  }

  get outputs(): SetLevelUpFeeCall__Outputs {
    return new SetLevelUpFeeCall__Outputs(this);
  }
}

export class SetLevelUpFeeCall__Inputs {
  _call: SetLevelUpFeeCall;

  constructor(call: SetLevelUpFeeCall) {
    this._call = call;
  }

  get _fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLevelUpFeeCall__Outputs {
  _call: SetLevelUpFeeCall;

  constructor(call: SetLevelUpFeeCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateCoolDownTimeCall extends ethereum.Call {
  get inputs(): UpdateCoolDownTimeCall__Inputs {
    return new UpdateCoolDownTimeCall__Inputs(this);
  }

  get outputs(): UpdateCoolDownTimeCall__Outputs {
    return new UpdateCoolDownTimeCall__Outputs(this);
  }
}

export class UpdateCoolDownTimeCall__Inputs {
  _call: UpdateCoolDownTimeCall;

  constructor(call: UpdateCoolDownTimeCall) {
    this._call = call;
  }

  get _updateCooldownTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateCoolDownTimeCall__Outputs {
  _call: UpdateCoolDownTimeCall;

  constructor(call: UpdateCoolDownTimeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
